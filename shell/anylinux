#!/usr/bin/env bash
clear && LC_ALL=C && LANG=C
SUSER="${SUDO_USER:-${USER}}"
nosu() { sudo -H -u "$SUSER" bash -c "$1"; }

# Check Internet
if [ "$EUID" -ne 0 ]; then
	echo "Please run as root" && exit
	if : >/dev/tcp/8.8.8.8/53; then true; else echo 'Offline Please connect...' && exit; fi
fi

# Replace bashrc
mv /home/"$SUSER"/.bashrc /home/"$SUSER"/.bashrc.bak
curl -LO https://raw.githubusercontent.com/Jrchintu/DOT/main/.bashrc
mv -i ./.bashrc /home/"$SUSER"/

# check distro type [debian,arch]
DISTRO="$(awk '/^ID=/' /etc/*-release | awk -F'=' '{ print tolower($2) }')"
if [ "$DISTRO" = 'arch' ]; then
	which pacman &>>/dev/null || exit
	pacman -Syu # Arch btw

elif [ "$DISTRO" = 'debian' ] || [ "$DISTRO" = 'ubuntu' ]; then
	which apt &>>/dev/null || exit
	read -rep 'Do you want AOSP env setup ? [Y/N]:' aospenv
	if [ "${aospenv}" = "y" ] || [ "${aospenv}" = "Y" ]; then
		# Remove Snapd
		sudo apt purge snapd
		rm -rf ~/snap /var/cache/snapd
		# ENV SETUP
		sudo apt update -y && sudo apt upgrade -y
		sudo add-apt-repository ppa:openjdk-r/ppa -y
		sudo apt install git-core p7zip-full aria2 rclone pigz bc bison build-essential \
			curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick libncurses5 \
			lib32readline-dev lib32z1-dev liblz4-tool libsdl1.2-dev ccache libtinfo5 zip \
			libwxgtk3.0-dev libxml2 libxml2-utils lzop pngcrush schedtool squashfs-tools \
			xsltproc zlib1g-dev unzip openjdk-8-jdk libssl-dev python
		sudo apt autoremove --purge -y
		curl https://storage.googleapis.com/git-repo-downloads/repo >./repo
		sudo mv repo /usr/bin/repo && sudo chmod a+x /usr/bin/repo && PATH="/usr/bin/repo:$PATH"
		# BASHRC
		cat <<EOF >>/home/"$SUSER"/.bashrc
export USE_CCACHE=1
export CCACHE_DIR="$HOME/.ccache"
export CCACHE_EXEC="$(which ccache)"
export CCACHE_COMPILERCHECK=content
ccache -o compression=true
export LC_ALL=C
export BUILD_BROKEN_DUP_RULES=true
export SKIP_ABI_CHECKS=true
export SKIP_API_CHECKS=true
export WITHOUT_CHECK_API=true
export TZ=Asia/Kolkata
ccache -M 30G -F 0
if [[ \$(pidof soong_ui) ]]; then :; else ccache -z; fi
EOF
		# Source bashrc
		source /home/"$SUSER"/.bashrc

		# MKDIR
		read -rep "Do you want to make new dir for rom ? (y/n) " newdiryn
		if [ "$newdiryn" = "y" ] || [ "$newdiryn" = "Y" ]; then
			mkdir rom && chmod -R 777 rom && chown "$SUSER":"$SUSER" rom
			cd rom && mkdir .repo
		fi
		read -rep "Do you want to clone local_manifest? (y/n) " lmanif
		if [ "${lmanif}" = "y" ] || [ "${lmanif}" = "Y" ]; then
			read -rep "What Branch From Local_manifest Repo U wanna clone [Case Sensitive]? " LMBRANCH
			git clone --depth=1 --single-branch https://github.com/Jrchintu/local_manifest -b "$LMBRANCH" .repo/local_manifests
		fi
	fi
else
	echo 'I am retard now. Its neither debian nor Arch btw'
fi

# Git config
git config --global user.name "Jrchintu"
git config --global user.email "harrypetersun@outlook.com"
git config --global color.ui auto
git config --global core.editor nano
